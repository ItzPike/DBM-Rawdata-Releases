{
  "name": "gcreate",
  "permissions": "NONE",
  "restriction": "1",
  "_id": "DvDki",
  "actions": [
    {
      "member": "1",
      "varName": "",
      "permission": "MANAGE_MESSAGES",
      "iftrue": "0",
      "iftrueVal": "",
      "iffalse": "2",
      "iffalseVal": "45",
      "name": "Check Member Permissions"
    },
    {
      "storage": "1",
      "varName": "maxLoopCAP",
      "changeType": "0",
      "value": "0",
      "name": "Control Variable"
    },
    {
      "channel": "0",
      "varName": "",
      "message": "What are you giving away?",
      "storage": "1",
      "varName2": "giveawayPrompt",
      "name": "Send Message"
    },
    {
      "storage": "1",
      "varName": "maxLoopCAP",
      "changeType": "1",
      "value": "1",
      "name": "Control Variable"
    },
    {
      "storage": "0",
      "varName": "",
      "filter": "content",
      "max": "1",
      "time": "20000",
      "storage2": "1",
      "varName2": "giveawayObject",
      "iftrue": "0",
      "iftrueVal": "",
      "iffalse": "2",
      "iffalseVal": "21",
      "name": "Await Response Call Action"
    },
    {
      "message": "0",
      "varName": "",
      "info": "3",
      "storage": "1",
      "varName2": "msgAuthor",
      "name": "Store Message Info"
    },
    {
      "message": "1",
      "varName": "giveawayObject",
      "info": "3",
      "storage": "1",
      "varName2": "responseAuthor",
      "name": "Store Message Info"
    },
    {
      "storage": "1",
      "varName": "maxLoopCAP",
      "comparison": "1",
      "value": "20",
      "iftrue": "2",
      "iftrueVal": "41",
      "iffalse": "0",
      "iffalseVal": "3",
      "name": "Check Variable"
    },
    {
      "storage": "1",
      "varName": "msgAuthor",
      "comparison": "1",
      "value": "tempVars(\"responseAuthor\")",
      "iftrue": "0",
      "iftrueVal": "",
      "iffalse": "2",
      "iffalseVal": "4",
      "name": "Check Variable"
    },
    {
      "storage": "1",
      "varName": "maxLoopCAP",
      "changeType": "0",
      "value": "0",
      "name": "Control Variable"
    },
    {
      "behavior": "0",
      "interpretation": "0",
      "code": "msg.author.lastMessage.delete();",
      "storage": "0",
      "varName": "",
      "name": "Run Script"
    },
    {
      "storage": "1",
      "varName": "giveawayPrompt",
      "message": "How many winners would you like to have?",
      "name": "Edit Message"
    },
    {
      "storage": "1",
      "varName": "maxLoopCAP",
      "changeType": "1",
      "value": "1",
      "name": "Control Variable"
    },
    {
      "storage": "0",
      "varName": "",
      "filter": "content",
      "max": "1",
      "time": "20000",
      "storage2": "1",
      "varName2": "numberOfMembers",
      "iftrue": "0",
      "iftrueVal": "",
      "iffalse": "2",
      "iffalseVal": "21",
      "name": "Await Response Call Action"
    },
    {
      "message": "1",
      "varName": "numberOfMembers",
      "info": "3",
      "storage": "1",
      "varName2": "responseAuthor",
      "name": "Store Message Info"
    },
    {
      "storage": "1",
      "varName": "maxLoopCAP",
      "comparison": "4",
      "value": "20",
      "iftrue": "2",
      "iftrueVal": "41",
      "iffalse": "0",
      "iffalseVal": "3",
      "name": "Check Variable"
    },
    {
      "storage": "1",
      "varName": "msgAuthor",
      "comparison": "1",
      "value": "tempVars(\"responseAuthor\")",
      "iftrue": "0",
      "iftrueVal": "",
      "iffalse": "2",
      "iffalseVal": "13",
      "name": "Check Variable"
    },
    {
      "storage": "1",
      "varName": "maxLoopCAP",
      "changeType": "0",
      "value": "0",
      "name": "Control Variable"
    },
    {
      "behavior": "1",
      "interpretation": "0",
      "code": "msg.author.lastMessage.delete()\nvar numberOfMembers = tempVars('numberOfMembers').content\nvar giveawayPrompt = tempVars('giveawayPrompt')\n\nif (!isNaN(numberOfMembers)) {\n  var numberOfWinners = parseInt(numberOfMembers)\n  this.storeValue(numberOfMembers, 1, 'numberOfMembers', cache)\n  this.callNextAction(cache)\n} else {\n  msg.channel.send({\n    embed: {\n      color: 0xff6666,\n      author: {\n        name: 'Error - Invalid Number',\n        icon_url: (client || this.getDBM().Bot.bot).user.avatarURL\n      },\n      description: 'You have entered a invalid number of members, please activate the command again to retry \\n \\n Some example responses are 1, 5, or 7'\n    }\n  })\n  giveawayPrompt.delete()\n}",
      "storage": "0",
      "varName": "",
      "name": "Run Script"
    },
    {
      "storage": "1",
      "varName": "giveawayPrompt",
      "message": "How long do you want the giveaway to last in days/hours/minutes?\n\nEx. I want the giveaway to last 1 day so I would respond with\n1d ",
      "name": "Edit Message"
    },
    {
      "storage": "1",
      "varName": "maxLoopCAP",
      "changeType": "1",
      "value": "1",
      "name": "Control Variable"
    },
    {
      "storage": "0",
      "varName": "",
      "filter": "content",
      "max": "1",
      "time": "20000",
      "storage2": "1",
      "varName2": "giveawayTime",
      "iftrue": "0",
      "iftrueVal": "",
      "iffalse": "2",
      "iffalseVal": "21",
      "name": "Await Response Call Action"
    },
    {
      "message": "1",
      "varName": "giveawayTime",
      "info": "3",
      "storage": "1",
      "varName2": "responseAuthor",
      "name": "Store Message Info"
    },
    {
      "storage": "1",
      "varName": "maxLoopCAP",
      "comparison": "4",
      "value": "20",
      "iftrue": "2",
      "iftrueVal": "41",
      "iffalse": "0",
      "iffalseVal": "3",
      "name": "Check Variable"
    },
    {
      "storage": "1",
      "varName": "msgAuthor",
      "comparison": "1",
      "value": "tempVars(\"responseAuthor\")",
      "iftrue": "0",
      "iftrueVal": "",
      "iffalse": "2",
      "iffalseVal": "21",
      "name": "Check Variable"
    },
    {
      "storage": "1",
      "varName": "maxLoopCAP",
      "changeType": "0",
      "value": "0",
      "name": "Control Variable"
    },
    {
      "behavior": "1",
      "interpretation": "0",
      "code": "msg.author.lastMessage.delete()\nvar timeResult = tempVars('giveawayTime').content\ntimeResult = timeResult.toLowerCase()\nvar Discord = require('discord.js')\nvar giveawayPrompt = tempVars('giveawayPrompt')\n\nif (timeResult.includes('d')) {\n  timeResult = timeResult.split('d')\n  if (!isNaN(timeResult[0])) {\n    var time = parseInt(timeResult[0])\n    this.storeValue(time * 1440, 1, 'giveawayTime', cache)\n    var currentDate = new Date()\n    currentDate.setHours(currentDate.getHours(), currentDate.getMinutes() + time * 1440)\n    currentDate = currentDate.toLocaleString('en-US', { timeZone: 'UTC', hour12: true })\n    var currentDateTime = currentDate.split(',')[1]\n    var currentDateDate = currentDate.split(',')[0]\n    var newEmbed = new Discord.RichEmbed({\n      color: 0x2E7F98,\n      author: {\n        name: 'ðŸŽ‰ New Giveaway ðŸŽ‰',\n        icon_url: (client || this.getDBM().Bot.bot).user.avatarURL\n      },\n      description: 'New giveaway for **' + tempVars('giveawayObject').content + '**\\n React with ðŸŽ‰ to enter the giveaway!',\n      footer: {\n        text: 'The giveaway will end at ' + currentDateDate + ' on ' + currentDateTime + ' UTC | ' + tempVars('numberOfMembers').toString() + ' Winners'\n      }\n    })\n    this.storeValue(newEmbed, 1, 'giveawayMessage', cache)\n    this.callNextAction(cache)\n  } else {\n    msg.channel.send({\n      embed: {\n        color: 0xff6666,\n        author: {\n          name: 'Error - Invalid Time',\n          icon_url: (client || this.getDBM().Bot.bot).user.avatarURL\n        },\n        description: 'You have entered a invalid time, please activate the command again to retry \\n \\n The format to respond with is [time][d,h,m] \\n Some example responses are 12d or 3h or 4m'\n      }\n    })\n    giveawayPrompt.delete()\n  }\n} else if (timeResult.includes('h')) {\n  timeResult = timeResult.split('h')\n  if (!isNaN(timeResult[0])) {\n    var time = parseInt(timeResult[0])\n    this.storeValue(time * 60, 1, 'giveawayTime', cache)\n    var currentDate = new Date()\n    currentDate.setHours(currentDate.getHours(), currentDate.getMinutes() + time * 60)\n    currentDate = currentDate.toLocaleString('en-US', { timeZone: 'UTC', hour12: true })\n    var currentDateTime = currentDate.split(',')[1]\n    var currentDateDate = currentDate.split(',')[0]\n    var newEmbed = new Discord.RichEmbed({\n      color: 0x2E7F98,\n      author: {\n        name: 'ðŸŽ‰ New Giveaway ðŸŽ‰',\n        icon_url: (client || this.getDBM().Bot.bot).user.avatarURL\n      },\n      description: 'New giveaway for **' + tempVars('giveawayObject').content + '**\\n React with ðŸŽ‰ to enter the giveaway!',\n      footer: {\n        text: 'The giveaway will end at ' + currentDateDate + ' on ' + currentDateTime + ' UTC | ' + tempVars('numberOfMembers').toString() + ' Winners'\n      }\n    })\n    this.storeValue(newEmbed, 1, 'giveawayMessage', cache)\n    this.callNextAction(cache)\n  } else {\n    msg.channel.send({\n      embed: {\n        color: 0xff6666,\n        author: {\n          name: 'Error - Invalid Time',\n          icon_url: (client || this.getDBM().Bot.bot).user.avatarURL\n        },\n        description: 'You have entered a invalid time, please activate the command again to retry \\n \\n The format to respond with is [time][d,h,m] \\n Some example responses are 12d or 3h or 4m'\n      }\n    })\n    giveawayPrompt.delete()\n  }\n} else if (timeResult.includes('m')) {\n  timeResult = timeResult.split('m')\n  if (!isNaN(timeResult[0])) {\n    var time = parseInt(timeResult[0])\n    this.storeValue(time, 1, 'giveawayTime', cache)\n    var currentDate = new Date()\n    currentDate.setHours(currentDate.getHours(), currentDate.getMinutes() + time)\n    currentDate = currentDate.toLocaleString('en-US', { timeZone: 'UTC', hour12: true })\n    var currentDateTime = currentDate.split(',')[1]\n    var currentDateDate = currentDate.split(',')[0]\n    var newEmbed = new Discord.RichEmbed({\n      color: 0x2E7F98,\n      author: {\n        name: 'ðŸŽ‰ New Giveaway ðŸŽ‰',\n        icon_url: (client || this.getDBM().Bot.bot).user.avatarURL\n      },\n      description: 'New giveaway for **' + tempVars('giveawayObject').content + '**\\n React with ðŸŽ‰ to enter the giveaway!',\n      footer: {\n        text: 'The giveaway will end at ' + currentDateDate + ' on ' + currentDateTime + ' UTC | ' + tempVars('numberOfMembers').toString() + ' Winners'\n      }\n    })\n    this.storeValue(newEmbed, 1, 'giveawayMessage', cache)\n    this.callNextAction(cache)\n  } else {\n    msg.channel.send({\n      embed: {\n        color: 0xff6666,\n        author: {\n          name: 'Error - Invalid Time',\n          icon_url: (client || this.getDBM().Bot.bot).user.avatarURL\n        },\n        description: 'You have entered a invalid time, please activate the command again to retry \\n \\n The format to respond with is [time][d,h,m] \\n Some example responses are 12d or 3h or 4m'\n      }\n    })\n    giveawayPrompt.delete()\n  }\n} else {\n  msg.channel.send({\n    embed: {\n      color: 0xff6666,\n      author: {\n        name: 'Error - Invalid Time',\n        icon_url: (client || this.getDBM().Bot.bot).user.avatarURL\n      },\n      description: 'You have entered a invalid time, please activate the command again to retry \\n \\n The format to respond with is [time][d,h,m] \\n Some example responses are 12d or 3h or 4m'\n    }\n  })\n}\n",
      "storage": "0",
      "varName": "",
      "name": "Run Script"
    },
    {
      "storage": "1",
      "varName": "giveawayPrompt",
      "message": "What channel would you like this giveaway to be posted in?\n\nPlease respond by mentioning a channel\n#[channelname]\n\nEx. My channel name I want the giveaway to be hosted in is giveaways\nI would respond with\n#giveaways",
      "name": "Edit Message"
    },
    {
      "storage": "1",
      "varName": "maxLoopCAP",
      "changeType": "1",
      "value": "1",
      "name": "Control Variable"
    },
    {
      "storage": "0",
      "varName": "",
      "filter": "content",
      "max": "1",
      "time": "20000",
      "storage2": "1",
      "varName2": "channelGiven",
      "iftrue": "0",
      "iftrueVal": "",
      "iffalse": "2",
      "iffalseVal": "21",
      "name": "Await Response Call Action"
    },
    {
      "message": "1",
      "varName": "channelGiven",
      "info": "3",
      "storage": "1",
      "varName2": "responseAuthor",
      "name": "Store Message Info"
    },
    {
      "storage": "1",
      "varName": "maxLoopCAP",
      "comparison": "4",
      "value": "20",
      "iftrue": "2",
      "iftrueVal": "41",
      "iffalse": "0",
      "iffalseVal": "3",
      "name": "Check Variable"
    },
    {
      "storage": "1",
      "varName": "msgAuthor",
      "comparison": "1",
      "value": "tempVars(\"responseAuthor\")",
      "iftrue": "0",
      "iftrueVal": "",
      "iffalse": "2",
      "iffalseVal": "29",
      "name": "Check Variable"
    },
    {
      "storage": "1",
      "varName": "maxLoopCAP",
      "changeType": "0",
      "value": "0",
      "name": "Control Variable"
    },
    {
      "behavior": "1",
      "interpretation": "0",
      "code": "var channelMentioned = ''\nvar embedMessageStored = tempVars('giveawayMessage')\nvar _this = this\nvar giveawayPrompt = tempVars('giveawayPrompt')\n\nif (msg.author.lastMessage.mentions.channels.first()) {\n  var giveawayChannel = msg.author.lastMessage.mentions.channels.first()\n  _this.storeValue(giveawayChannel, 1, 'giveawayChannel', cache)\n  giveawayChannel.send(embedMessageStored)\n    .then(function (message) {\n      message.react('ðŸŽ‰')\n      _this.storeValue(message, 1, 'giveawayMessageSent', cache)\n    }).catch(function (error) {\n      console.log(error)\n    })\n  embedMessageStored.color = 0x000000\n  _this.storeValue(embedMessageStored, 1, 'giveawayMessage', cache)\n  _this.callNextAction(cache)\n} else {\n  msg.channel.send({\n    embed: {\n      color: 0xff6666,\n      author: {\n        name: 'Error - Invalid Channel',\n        icon_url: msg.mentions.users.first().avatarURL\n      },\n      description: 'You have entered a invalid channel, please activate the command again to retry \\n \\n The format to respond with is #[channel] \\n Some example responses are #giveaways or #general or #annoucements'\n    }\n  })\n  giveawayPrompt.delete()\n}\nmsg.author.lastMessage.delete()",
      "storage": "0",
      "varName": "",
      "name": "Run Script"
    },
    {
      "storage": "1",
      "varName": "giveawayPrompt",
      "name": "Delete Message"
    },
    {
      "storage": "0",
      "varName": "giveawayPrompt",
      "name": "Delete Message"
    },
    {
      "time": "${tempVars(\"giveawayTime\")}",
      "measurement": "2",
      "name": "Wait"
    },
    {
      "behavior": "1",
      "interpretation": "0",
      "code": "async function getReactions () {\n  try {\n    var giveawayMsg = tempVars('giveawayMessageSent')\n    var giveawayEmbed = tempVars('giveawayMessage')\n    var numberOfMembers = tempVars('numberOfMembers')\n    var winnerArray = []\n    var winnerText = ''\n    var users = await giveawayMsg.reactions.get('ðŸŽ‰').fetchUsers()\n    var userArray = users.array()\n    if (userArray.length > 1) {\n      if (userArray.length > numberOfMembers) {\n        for (var i = 0; i < numberOfMembers; i++) {\n          var randomNumber = Math.floor(Math.random() * userArray.length) + 1\n          var randomuser = await userArray[randomNumber]\n          winnerArray.push(randomuser)\n          userArray.splice(randomNumber, randomNumber)\n        }\n        for (i = 0; i < winnerArray.length; i++) {\n          winnerText = winnerText + winnerArray[i] + '\\n'\n        }\n        giveawayEmbed.author.name = 'ðŸŽ‰ Giveaway Ended ðŸŽ‰';\n        giveawayEmbed.description = giveawayEmbed.description + '\\n \\n Winners: \\n' + winnerText\n        giveawayEmbed.footer.text = giveawayEmbed.footer.text.replace('will end', 'ended')\n        giveawayMsg.edit(giveawayEmbed)\n        giveawayMsg.channel.send('ðŸŽ‰ Congratulations! ðŸŽ‰ \\n' + winnerText + 'They have won **' + tempVars('giveawayObject').content + '**')\n      } else {\n        for (i = 0; i < userArray.length - 1; i++) {\n          var randomNumber = Math.floor(Math.random() * userArray.length) + 1\n          var randomuser = await userArray[randomNumber]\n          winnerArray.push(randomuser)\n          userArray.splice(randomNumber, randomNumber)\n        }\n        for (i = 0; i < winnerArray.length; i++) {\n          winnerText = winnerText + winnerArray[i] + '\\n'\n        }\n        giveawayEmbed.author.name = 'ðŸŽ‰ Giveaway Ended ðŸŽ‰'\n        giveawayEmbed.description = giveawayEmbed.description + '\\n \\n Winners: \\n' + winnerText\n        giveawayMsg.edit(giveawayEmbed)\n        giveawayMsg.channel.send('ðŸŽ‰ Congratulations! ðŸŽ‰ \\n' + winnerText + '\\nThey have won **' + tempVars('giveawayObject').content + '**\\n \\nNote:The number of people who reacted isn\\'t enough to satisfy the numbers of members that can win so the bot has gotten the maximum number of people it can draw to win.')\n      }\n    } else {\n      msg.channel.send({\n        embed: {\n          color: 0xff6666,\n          author: {\n            name: 'No one reacted',\n            icon_url: (client || this.getDBM().Bot.bot).user.avatarURL\n          },\n          description: 'None has reacted so no one won. Oh well'\n        }\n      })\n    }\n  } catch (error) {\n    msg.channel.send({\n      embed: {\n        color: 0xff6666,\n        author: {\n          name: 'Error - Giveaway Error',\n          icon_url: (client || this.getDBM().Bot.bot).user.avatarURL\n        },\n        description: 'Please retry the command, the bot has errored \\n This may be due to the fact that it may of not been able to grab the reactions \\n An error message has been outputted to console for futher debugging'\n      }\n    })\n    console.log('Giveaway Command Error: ' + error)\n  }\n}\ngetReactions()\n",
      "storage": "0",
      "varName": "",
      "name": "Run Script"
    },
    {
      "name": "End Action Sequence"
    },
    {
      "title": "Giveaway Creation - Timeout",
      "author": "",
      "color": "ff6666",
      "timestamp": "true",
      "url": "",
      "authorIcon": "",
      "imageUrl": "",
      "thumbUrl": "",
      "storage": "1",
      "varName": "embed",
      "name": "Create Embed Message"
    },
    {
      "storage": "1",
      "varName": "embed",
      "message": "The command has timeout as you either took too long or too many people has chatted while you are trying to setup the giveaway\n\nPlease try again, in an less active channel so you can see the original message that gives you instructions on how to setup the giveaway",
      "name": "Set Embed Description"
    },
    {
      "storage": "1",
      "varName": "embed",
      "channel": "0",
      "varName2": "",
      "storage3": "0",
      "varName3": "",
      "name": "Send Embed Message"
    },
    {
      "name": "End Action Sequence"
    },
    {
      "title": "Giveaway Creation - No Permission",
      "author": "",
      "color": "ff6666",
      "timestamp": "true",
      "url": "",
      "authorIcon": "",
      "imageUrl": "",
      "thumbUrl": "",
      "storage": "1",
      "varName": "embed",
      "name": "Create Embed Message"
    },
    {
      "storage": "1",
      "varName": "embed",
      "message": "You do not have permission to start a giveaway!\nYou need the permission `Manage Messages`",
      "name": "Set Embed Description"
    },
    {
      "storage": "1",
      "varName": "embed",
      "channel": "0",
      "varName2": "",
      "storage3": "0",
      "varName3": "",
      "name": "Send Embed Message"
    }
  ]
}
